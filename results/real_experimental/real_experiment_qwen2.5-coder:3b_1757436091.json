{
  "model_name": "qwen2.5-coder:3b",
  "model_type": "code",
  "timestamp": 1757436091,
  "problems_tested": 1,
  "template_results": {
    "direct": {
      "pass_at_k": {
        "1": 0.0,
        "5": 0.0,
        "10": 0.0,
        "100": 0.0
      },
      "success_rate": 0.0,
      "total_samples": 2,
      "generations": [
        {
          "task_id": "HumanEval/0",
          "template": "direct",
          "attempt": 0,
          "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given thr...",
          "generated_text": "To solve the problem of checking if any two numbers in a list are closer to each other than a given threshold, we can use a simple approach that involves sorting the list and then comparing adjacent elements. This method is efficient because it reduces the number of comparisons needed compared to a naive approach.\n\nHere's how you can implement this:\n\n```python\nfrom typing import List",
          "extracted_code": "To solve the problem of checking if any two numbers in a list are closer to each other than a given threshold, we can use a simple approach that involves sorting the list and then comparing adjacent elements. This method is efficient because it reduces the number of comparisons needed compared to a naive approach.\n\nHere's how you can implement this:\n\n```python\nfrom typing import List",
          "execution_time": 2.0635223388671875,
          "passed": false,
          "execution_result": "failed: unterminated string literal (detected at line 3) (<string>, line 3)",
          "error_message": null
        },
        {
          "task_id": "HumanEval/0",
          "template": "direct",
          "attempt": 1,
          "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given thr...",
          "generated_text": "To solve the problem of checking if any two numbers in a list are closer to each other than a given threshold, we can use a simple algorithm that iterates through the list and compares each pair of adjacent elements. Here's how you can implement this:\n\n```python\nfrom typing import List",
          "extracted_code": "To solve the problem of checking if any two numbers in a list are closer to each other than a given threshold, we can use a simple algorithm that iterates through the list and compares each pair of adjacent elements. Here's how you can implement this:\n\n```python\nfrom typing import List",
          "execution_time": 1.234574556350708,
          "passed": false,
          "execution_result": "failed: unterminated string literal (detected at line 1) (<string>, line 1)",
          "error_message": null
        }
      ]
    },
    "instruction": {
      "pass_at_k": {
        "1": 0.0,
        "5": 0.0,
        "10": 0.0,
        "100": 0.0
      },
      "success_rate": 0.0,
      "total_samples": 2,
      "generations": [
        {
          "task_id": "HumanEval/0",
          "template": "instruction",
          "attempt": 0,
          "prompt": "Please complete the following Python function. Only return the code, no explanation:\n\nfrom typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if...",
          "generated_text": "```python\nfrom typing import List",
          "extracted_code": "```python\nfrom typing import List",
          "execution_time": 0.7190048694610596,
          "passed": false,
          "execution_result": "failed: invalid syntax (<string>, line 1)",
          "error_message": null
        },
        {
          "task_id": "HumanEval/0",
          "template": "instruction",
          "attempt": 1,
          "prompt": "Please complete the following Python function. Only return the code, no explanation:\n\nfrom typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if...",
          "generated_text": "```python\nfrom typing import List",
          "extracted_code": "```python\nfrom typing import List",
          "execution_time": 0.2854039669036865,
          "passed": false,
          "execution_result": "failed: invalid syntax (<string>, line 1)",
          "error_message": null
        }
      ]
    },
    "few_shot": {
      "pass_at_k": {
        "1": 0.0,
        "5": 0.0,
        "10": 0.0,
        "100": 0.0
      },
      "success_rate": 0.0,
      "total_samples": 2,
      "generations": [
        {
          "task_id": "HumanEval/0",
          "template": "few_shot",
          "attempt": 0,
          "prompt": "Example:\ndef add_numbers(a, b):\n    return a + b\n\nNow complete this function:\n\nfrom typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in giv...",
          "generated_text": "```python\nfrom typing import List",
          "extracted_code": "```python\nfrom typing import List",
          "execution_time": 0.7166335582733154,
          "passed": false,
          "execution_result": "failed: invalid syntax (<string>, line 1)",
          "error_message": null
        },
        {
          "task_id": "HumanEval/0",
          "template": "few_shot",
          "attempt": 1,
          "prompt": "Example:\ndef add_numbers(a, b):\n    return a + b\n\nNow complete this function:\n\nfrom typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in giv...",
          "generated_text": "```python\nfrom typing import List",
          "extracted_code": "```python\nfrom typing import List",
          "execution_time": 0.2830014228820801,
          "passed": false,
          "execution_result": "failed: invalid syntax (<string>, line 1)",
          "error_message": null
        }
      ]
    }
  },
  "pass_at_k": {
    "1": 0.0,
    "5": 0.0,
    "10": 0.0,
    "100": 0.0
  },
  "statistical_metrics": {
    "template_scores": {
      "direct": 0.0,
      "instruction": 0.0,
      "few_shot": 0.0
    },
    "mean_score": 0.0,
    "std_dev": 0.0,
    "sensitivity": 0.0
  },
  "metadata": {
    "templates_used": [
      "direct",
      "instruction",
      "few_shot"
    ],
    "samples_per_template": 2,
    "k_values": [
      1,
      5,
      10,
      100
    ],
    "timeout": 3.0,
    "random_seed": 42
  }
}