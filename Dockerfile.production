# AI Benchmark Suite - Production Dockerfile
# Sprint 4.0: Enterprise Production Container

FROM python:3.11-slim as base

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    docker.io \
    nodejs \
    npm \
    openjdk-17-jdk \
    g++ \
    rustc \
    golang-go \
    && rm -rf /var/lib/apt/lists/*

# Set up working directory
WORKDIR /app

# Create non-root user for security
RUN groupadd -r benchmark && useradd -r -g benchmark -s /bin/bash benchmark
RUN mkdir -p /app/logs /app/results /app/cache && \
    chown -R benchmark:benchmark /app

# Copy requirements and install Python dependencies
COPY requirements.txt requirements.production.txt ./
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.production.txt

# Copy application source code
COPY src/ ./src/
COPY config/ ./config/
COPY scripts/ ./scripts/
COPY harnesses/ ./harnesses/

# Set up harness environments
RUN cd harnesses/bigcode-evaluation-harness && \
    python -m venv venv && \
    ./venv/bin/pip install --no-cache-dir -e . && \
    cd ../lm-evaluation-harness && \
    python -m venv venv && \
    ./venv/bin/pip install --no-cache-dir -e .

# Set permissions
RUN chown -R benchmark:benchmark /app
RUN chmod +x scripts/*.py scripts/*.sh

# Create startup script
RUN cat > /app/start_production.sh << 'EOF'
#!/bin/bash
set -e

echo "🚀 Starting AI Benchmark Suite in Production Mode"
echo "=================================================="

# Wait for dependencies
echo "⏳ Waiting for database..."
while ! nc -z postgres 5432; do sleep 1; done
echo "✅ Database ready"

echo "⏳ Waiting for Redis..."
while ! nc -z redis 6379; do sleep 1; done
echo "✅ Redis ready"

# Initialize database if needed
if [ "$INIT_DB" = "true" ]; then
    echo "🔧 Initializing database..."
    python scripts/init_production_db.py
fi

# Start monitoring server in background
echo "📊 Starting monitoring dashboard..."
python scripts/monitoring_dashboard.py &

# Start main API server
echo "🎯 Starting main API server..."
exec python scripts/production_api_server.py
EOF

RUN chmod +x /app/start_production.sh

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Switch to non-root user
USER benchmark

# Expose ports
EXPOSE 8080 8081

# Set environment variables
ENV PYTHONPATH=/app/src
ENV ENVIRONMENT=production
ENV LOG_LEVEL=INFO

# Start the application
CMD ["/app/start_production.sh"]